[["index.html", "FHDaSL GitHub Snacks About this Book 0.1 Motivation 0.2 Target Audience 0.3 Github “snack table”", " FHDaSL GitHub Snacks September 20, 2023 About this Book 0.1 Motivation Github is a useful tool, but it can be overwhelming to get started. This is meant to break up the tasks in GitHub into munchable little “snacks” so as to make it less overwhelming. 0.2 Target Audience The course is intended for individuals who need to “git” going with GitHub. It is intended to be able to be used in such a way that you can jump to the chapter that covers the task that are you attempting to do as described in the table below. 0.3 Github “snack table” Each chapter starts with prerequisites. If you are already familiar and have done the task that is mentioned as a prerequisite then you are ready for that chapter. Otherwise, click on the first link to a prerequisite that you haven’t fulfilled. Alternatively you can go through this course from start to finish. But note that there are two different ways (and two different chapters) about how to create a pull request. Pick the one that fits better for you and realize you can always go to the other chapter to try the other method later. Your Objective Which chapter to go to Why is git and Github even important or useful? Start here Creating an account on GitHub Start here How to start a project on a GitHub repository Start here Getting added to the Fred Hutch GitHub organization Start here Install a GUI to help you with git on your computer Start here How to clone a project – download a project to your computer from GitHub Start here How to make a pull request by pointing and clicking Start here How to make a pull request by actually having things on your computer Start here What is code review and why is it important? Start here How to conduct code review on GitHub as an author Start here How to conduct code review on GitHub as a reviewer Start here Collaborating on GitHub Start here "],["why-github.html", "Chapter 1 Why GitHub", " Chapter 1 Why GitHub git is a version control system that is a great tool for creating reproducible analyses. What is version control? Ruby here is experiencing a lack of version control and could probably benefit from using git. All of us at one point or another have created different versions of a file or document, but for analysis projects this can easily get out of hand if you don’t have a system in place. That’s where git comes in handy. There are other version control systems as well, but git is the most popular in part because it works with GitHub, an online hosting service for git controlled files. 1.0.1 GitHub and git allow you to… 1.0.1.1 Maintain transparent analyses Open and transparent analyses are a critical part to conducting open science. GitHub allows you to conduct your analyses in an open source manner. Open science also allows others to better understand your methods and potentially borrow them for their own research, saving everyone time! 1.0.1.2 Have backups of your code and analyses at every point Life happens, sometimes you misplace a file or your computer malfunctions. If you ever lose data on your computer or need to retrieve something from an earlier version of your code, GitHub allows you to revert your losses. 1.0.1.3 Keep a documented history of your project Overtime in a project, a lot happens, especially when it comes to exploring and handling data. Sometimes the rationale behind decisions that were made around an analysis can get lost. GitHub keeps communications and tracks the changes to your files so that you don’t have to revisit a question you already answered. 1.0.1.4 Collaborate with others Analysis projects highly benefit from good collaborations! But having multiple copies of code on multiple collaborators’ computers can be a nightmare to keep straight. GitHub allows people to work on the same set of code concurrently but still have a method to integrate all the edits together in a systematic way. 1.0.1.5 Experiment with your analysis Data science projects often lead to side analyses that could be very worth while but might be scary to venture on if you don’t have your code well version controlled. Git and GitHub allow you to venture on these side experiments without fear since your main code can be kept safe from your side venture. "],["create-a-github-account.html", "Chapter 2 Create a GitHub account 2.1 Prerequisites 2.2 How to create an account", " Chapter 2 Create a GitHub account 2.1 Prerequisites Have an understanding of why Github is useful 2.2 How to create an account First step is to create an account with GitHub. It’s free. Go here to do that. Don’t use your full name, but preferably use some sort of abbreviated version of your first or last name so that others can recognize you. "],["setting-up-a-project-on-github.html", "Chapter 3 Setting up a project on GitHub 3.1 Prerequisites 3.2 How to start a repository on GitHub", " Chapter 3 Setting up a project on GitHub 3.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account 3.2 How to start a repository on GitHub Git and GitHub have a whole rich world of tools and terms that can get complex quickly, but for this exercise, we will not worry about those terms and functionalities just yet, but focus on getting code up on GitHub so we are ready to collaborate and conduct open analyses! Go to Github’s main page and click Sign Up if you don’t have an account. Follow these instructions to create a repository. As a general, but not absolute rule, you will want to keep one GitHub repository for one analysis project. Name the repository something that reminds you what its related to. Choose Public. Check the box that says Add a README. For more about what a README is and what it should have, see the below section. Follow these instructions to add the example files you downloaded to your new repository. Congrats! You’ve started your very own project on GitHub! We encourage you to do the same with your own code and other projects! Any feedback you have regarding this exercise is greatly appreciated; you can fill out this form! 3.2.1 READMEs! READMEs are also a great way to help your collaborators get quickly acquainted with the project. READMEs stick out in a project and are generally universal signal for new people to the project to start by READing them. GitHub automatically will preview your file called “README.md” when someone comes to the main page of your repository which further encourages people looking at your project to read the information in your README. Information that should be included in a README: General purpose of the project Instructions on how to re-run the project Lists of any software required by the project Input and output file descriptions. Descriptions of any additional tools included in the project? You can take a look at this template README to get your started. 3.2.1.1 More about writing READMEs: How to write a good README file A Beginners Guide to writing a Kicka** README How to write an awesome README "],["getting-added-to-the-hutch-github-organization.html", "Chapter 4 Getting added to the Hutch GitHub organization 4.1 Prerequisites", " Chapter 4 Getting added to the Hutch GitHub organization 4.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account "],["how-to-get-added-to-the-fredhutch-github-organization.html", "Chapter 5 How to get added to the fredhutch github organization", " Chapter 5 How to get added to the fredhutch github organization "],["setting-up-a-git-client.html", "Chapter 6 Setting up a Git Client 6.1 Prerequisites 6.2 GitKraken 6.3 Install GitKraken", " Chapter 6 Setting up a Git Client 6.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github 6.2 GitKraken Interaction with git and GitHub can be done completely from the command line, but sometimes this can be harder to keep track of. To help us navigate this, we recommend using a git client. There are a lot of different clients out there, and they are generally free for most situations you will need. In this course, we will take you through how to use GitKraken, one such git client. GitKraken is nice because they have lots of nice tutorials, it works pretty well, and its free for most use cases. But if you find GitKraken doesn’t work for you, you can explore other git clients. For this course, we’ll be using GitKraken. 6.3 Install GitKraken Go here to install GitKraken. Follow their instructions to sign in with your GitHub account. It will ask you to authorize your GitHub account to connect to GitKraken. Click Authorize. You may find it helpful to watch GitKraken’s own tutorial (linked below) about how to “git” started, but we will also guide you through each step! GitHub has a host of terms that can feel like a whole language at first, but we’ll introduce them one at a time. To start, a lot of the GitHub workflow centers around handling copies of your code that are either stored on the internet (are remote) or are stored on your computer (are local). Remote = GitHub on the internet Local = What’s on your own computer A repository, in the case of a data science project, is mostly synonymous with the word “project”. Using GitHub, a project will exist both as a remote repository and a local repository (in other words, it will be on the internet on GitHub and on your computer). Repository = a set of project files that have a location on GitHub "],["getting-a-repository-on-to-your-computer-cloning.html", "Chapter 7 Getting a repository on to your computer – cloning 7.1 Prerequisites 7.2 What is cloning on GitHub?", " Chapter 7 Getting a repository on to your computer – cloning 7.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github 7.2 What is cloning on GitHub? In our daily grind, its ideal to work on your project from your own computer. To set this up, we’ll need to clone it to our own computer. Cloning is making a remote copy of the project local. clone = To make a remote repository local. In other words, to make an online repository downloaded and linked on your computer. To get started, you will need to clone the GitHub repository you created. We will be using this repository for the duration of this course. It is simple to clone a GitHub repository using GitKraken. First, sign in to GitKraken; under Repository Management &gt; Clone tab, click Clone a repo. Then, choose where you’d like the repository to be on your computer using the Browse button. You will need to Copy + Paste your new repository’s URL (web address) to where it says URL. Navigate to your repository on GitHub to copy the URL. Copying and pasting is advisable because any little typo will inhibit cloning. Now you are ready to click Clone the repository! It will ask you if you’d like to Open Now, click that. "],["making-a-pull-request-beginners.html", "Chapter 8 Making a Pull Request – Beginners 8.1 Prerequisites 8.2 What’s a Pull Request? 8.3 Create a new branch 8.4 Committing changes 8.5 Open a pull request 8.6 More resources for learning GitHub 8.7 How to file a pull requests – variation", " Chapter 8 Making a Pull Request – Beginners 8.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github 8.2 What’s a Pull Request? If you have repository on GitHub and you’re ready to start adding and editing your files! The GitHub workflow of editing and adding files in your repository is called pull requests! Pull requests are a way to set up proposed changes (instead of direct changes) before you publish them. Pull requests for you to check and discuss your proposed changes. Importantly, pull requests also allow you to discuss proposed changes with others! You can edit and add content directly in the GitHub website if you prefer not to learn how to use git and GitHub from your computer. You can learn how to use git and GitHub in a more advanced sense in this chapter. 8.3 Create a new branch On GitHub code is managed through the use of branches. To explain branches we’ll mainly refer to two branches: your main branch: The main branch is what your content will be published from and it will be live to any learners looking at your course. You will want to keep this main branch as preserved and well curated as possible! So when you are ready to add more content you will want to have an isolated copy of your files to work from that keeps your main branch safe as you work. You can name the branch you work from whatever you like – its recommended you name it something related to the changes you are working on To create a new branch through the GitHub website, you will go to your main course repository page, click on the branch changing button that says main. Type in a name for your new branch; something that relates to the changes you are making. For the purposes of this example, we’ll call this new branch, a-new-branch. Then click Create branch: new-changes from main. Congrats! You’ve made a new branch. GitHub will automatically show you your new branch’s files (which have been copied from the main). You can tell that you are on the new branch as the left corner branch tab now says the name of our new branch (a-new-branch). Now that we have a copy of all the files from the main branch, we can safely work on them in the a-new-branch branch. Whenever you are making changes, you’ll want to check that you are on your new branch in order to add any new changes to your pull request, just look at the left upper corner to make sure! Now let’s try making some changes. 8.4 Committing changes In your OTTR repository, on your new branch, you can now add/edit/rename currently existing files while protecting your main branch. Adding changes to a branch is called making commits. We will describe how to edit existing files below, however, GitHub has great information about how to create and remove files. Additionally GitHub is always making changes, so if our instruction seem out of date, definitely checkout what GitHub’s current documentation: Follow GitHub’s instructions about managing files through their website here After every edit you make, scroll down and make sure that you choose Commit directly to the new-changes branch.. This will add your changes to the pull request. Then click Commit changes. You will need to do this after every change to add them to your branch. As an example, we will show how we’ve made a simple change to a file called 01-intro.Rmd. Now click on the edit button to make a change. Notice that it shows what branch we are working on. Make an edit, such as adding to the introduction like so. You can preview how it looks by pressing the Preview changes button. Red will indicate new deletions and green will indicate new additions. Then write a message about what changes you made and press the commit changes button. Now you are ready to open your pull request. 8.5 Open a pull request After a variable number of commits, your branch, perhaps called a-new-branch or any other new branch you might have made, is a different version of the original code base that may have a nifty improvement to it. But our main goal is to add that nifty improvement to the main branch. To start this process of bringing in new changes to the main curated repository, we will create a pull request. From GitHub: Pull requests let you tell others about changes you’ve pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. Pull requests are the meat of how code changes and improvements get reviewed and incorporated! A vast majority of the benefits of incorporating GitHub into your workflow centers around fully utilizing the power of pull requests! Now we can open up a pull request if we go to our GitHub repository on GitHub. You might need to migrate back to the main page for your repository and can do so by simply clicking on the blue name of your repository at the top. Then you will see something like this yellow banner message, where there is a button that says Compare &amp; pull request. If you don’t see the pull request message, click here. Note that sometimes if you have used the same branch multiple times you may need some extra steps to create a pull request. This will involve first clicking on the branch tab (which may have a different number). Then click on the New Pull Request button for the branch you want to work on. Be careful that is the branch you intend. After you click on Compare &amp; pull request you’ll be taken to a screen where you can add information about your changes. After you are done writing your description, click Create Pull Request! (If you don’t have your pull request description perfect don’t worry about it, you can always edit it later). Congrats! You’ve just opened a pull request! For every set of changes you’ll make to your course, you will want to follow this similar set of steps. To summarize, here’s what those steps are: 8.6 More resources for learning GitHub 8.7 How to file a pull requests – variation Using version control with GitHub Happy Git and GitHub for the useR GitHub for data scientists GitHub docs about creating a Pull Request Making a Pull Request "],["making-a-pull-request-advanced.html", "Chapter 9 Making a Pull Request – Advanced 9.1 Prerequisites 9.2 Set up a Git Client (GitKraken) 9.3 Start a GitHub repository 9.4 More resources for learning GitHub", " Chapter 9 Making a Pull Request – Advanced 9.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github Set up a Git Client 9.2 Set up a Git Client (GitKraken) Interaction with git and GitHub can be done completely from the command line, but sometimes this can be harder to keep track of. To help us navigate this, we recommend using a git client. There are a lot of different clients out there, and they are generally free for most situations you will need. In this course, we will take you through how to use GitKraken, one such git client. GitKraken is nice because they have lots of nice tutorials, it works pretty well, and its free for most use cases. But if you find GitKraken doesn’t work for you, you can explore other git clients. For this course, we’ll be using GitKraken. 9.2.1 Install GitKraken Go here to install GitKraken. Follow their instructions to sign in with your GitHub account. It will ask you to authorize your GitHub account to connect to GitKraken. Click Authorize. You may find it helpful to watch GitKraken’s own tutorial (linked below) about how to “git” started, but we will also guide you through each step! GitHub has a host of terms that can feel like a whole language at first, but we’ll introduce them one at a time. To start, a lot of the GitHub workflow centers around handling copies of your code that are either stored on the internet (are remote) or are stored on your computer (are local). Remote = GitHub on the internet Local = What’s on your own computer A repository, in the case of a data science project, is mostly synonymous with the word “project”. Using GitHub, a project will exist both as a remote repository and a local repository (in other words, it will be on the internet on GitHub and on your computer). Repository = a set of project files that have a location on GitHub 9.3 Start a GitHub repository If you don’t already have a Github repository in mind that you are working from, you can create one using these steps: Go to Github’s main page and sign in with your GitHub account. Follow these instructions to create a repository. As a general, but not absolute rule, you will want to keep one GitHub repository for one analysis project. Name the repository something that reminds you what its related to. For these examples, we’re calling using repository-name as our placeholder. Choose Public. Choose add a README. Follow these instructions to add your files to this repository. This new repository you created should look something like this. 9.3.1 git clone Now you have a repository on GitHub online! In our daily grind, we will work on this code from our own computer. To set this up, we’ll need to clone it to our own computer. Cloning is making a remote copy of the project local. clone = To make a remote repository local. In other words, to make an online repository downloaded and linked on your computer. To get started, you will need to clone the GitHub repository you created. We will be using this repository for the duration of this course. It is simple to clone a GitHub repository using GitKraken. First, sign in to GitKraken; under Repository Management &gt; Clone tab, click Clone a repo. Then, choose where you’d like the repository to be on your computer using the Browse button. You will need to Copy + Paste your new repository’s URL (web address) to where it says URL. Navigate to your repository on GitHub to copy the URL. Copying and pasting is advisable because any little typo will inhibit cloning. Now you are ready to click Clone the repository! It will ask you if you’d like to Open Now, click that. 9.3.2 Create a branch Handling branches is where you unleash the real benefit of GitHub, but it’s also the confusing part to get the hang of. branch = a unique working copy of file changes of a GitHub repository. A branch can be local and remote. The best way to get a grasp on what the branches represent is to create one and start using it. In GitKraken we can create a new branch; this will be your working copy. First, click the Branch button. Next, type in a branch name in the box that the cursor is blinking in. In our example, we are calling it a-new-branch. Now click Enter! Now you have a new branch! Now we can edit our files and code however we normally would. Go ahead and make an edit to any file in your new repository. If you’ve made a change to any file in your repository, it will appear in GitKraken and you can click on it to see the differences. If we want to add these file changes to our current branch, we need to commit them. add = to stage your files to be committed to your current branch. commit = include your set of file changes to your current branch. Now that we have changes committed to our branch we are ready to add them to the remote, internet copy! To do this, we will need to push our branch. To push means to add changes that are on your new branch to the remote branch (internet version). You can select your origin, which refers to where your branch is stored on the internet. Choose your origin in the dropdown menu and click Submit. origin = where your branch is stored on the internet (remotely) push = to add changes from your branch to its remote counterpart. In other words, put your changes online. After a variable number of commits, your branch, called a-new-branch, is a different version of the original code base that may have a nifty improvement to it. But our main goal is to add that nifty improvement to the main branch. To start this process of bringing in new changes to the main curated repository, we will create a pull request. pull request = A way to propose changes from a branch to be included into the main repository. From GitHub: &gt; Pull requests let you tell others about changes you’ve pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. Pull requests are the meat of how code changes and improvements get reviewed and incorporated! A vast majority of the benefits of incorporating GitHub into your workflow centers around fully utilizing the power of pull requests! Now we can open up a pull request if we go to our GitHub repository on GitHub. After you click on Compare &amp; pull request you’ll be taken to a screen where you can add information about your changes. After you are done writing your description, click Create Pull Request! (If you don’t have your pull request description perfect don’t worry about it, you can always edit it later). Congrats! You’ve just opened a pull request! In an upcoming chapter we will discuss what information you should put in this pull request description to make it pertinent for yourself and whoever reviews your pull request. To summarize, below is what this workflow looks like: One more note: if you do want to use the command line or if you want to know more about the specific git commands that GitKraken is doing for you (which might be handy for troubleshooting), the specific commands that can be used or Googled at each step are highlighted in red in the images - you just need to add git before them! For example, you would type git push in your command line in order to push your code. Or if you’d like to know more about pushing code, you can google git push. 9.4 More resources for learning GitHub Happy Git and GitHub for the useR by Bryan and Hester (2021). GitHub for data scientists by Vickery (2019). GitHub docs about creating a Pull Request by “Creating a Pull Request” (2021). Making a Pull Request by Radigan (2021). If you have any feedback on this chapter, please fill out this form, we’d love to hear your feedback! "],["collaborating-on-github.html", "Chapter 10 Collaborating on GitHub 10.1 Prerequisites 10.2 Tips for collaborating through GitHub", " Chapter 10 Collaborating on GitHub 10.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github Set up a Git Client Know how to make a pull request - Beginner method or Advanced method :warning: This section is still being developed! 10.2 Tips for collaborating through GitHub Err on the side of over communicating! Don’t force push Don’t merge to main without a PR Make issues. (How to make good ones) How to ask for help! You can close your own issues and PRs Tag relevant people. "],["what-is-code-review.html", "Chapter 11 What is code review? 11.1 Exercise: Set up your code review request!", " Chapter 11 What is code review? The only way to know if your analysis is truly reproducible is to send it to someone else to reproduce! That sentiment is at the heart of code review. Although most wouldn’t dare send out a manuscript for publishing without having our collaborators giving it a line-by-line review, people don’t always feel the same way about code. Parker (2017) describes code review: Code review will not guarantee an accurate analysis, but it’s one of the most reliable ways of establishing one that is more accurate than before. Not only does code review help boost the accuracy and reproducibility of the analysis, it also helps everyone involved in the process learn something new! 11.0.0.1 Recommended reading about code review Code Review Guidelines for Humans by Hauer (2018). Your Code Sucks! – Code Review Best Practices by Hildebr (2020). Best practices for Code Review by Smartbear Team (2021). Why code reviews matter (and actually save time!) by Radigan (2021). 11.1 Exercise: Set up your code review request! Since reproducibility is all about someone else being able to run your code and obtain your results, the exercise in this course involves preparing to do just that! The goal: In the second part of this reproducibility course we will discuss how to conduct formal line-by-line code reviews, but for now, we will discuss how to prep your analysis for someone else look at your code and attempt to run it. At this point, you should have a GitHub repository that contains the following: A make_heatmap notebook A README A data folder containing the metadata and gene expression matrix files in a folder named SRP070849: SRP070849/metadata_SRP070849.tsv SRP070849/SRP070849.tsv 1) Refresh and delete output Before you send off your code to someone else, delete your output (the results and plots folders) and attempt to re-run it yourself. This also involves restarting your R session/Python kernel and running all the chunks again. 2) Re-run the whole analysis 3) Interrogate and troubleshoot If your code has any issues running, try your best to troubleshoot the problems. Read this handy guide for tips on troubleshooting R. 4) Rinse and repeat Repeat this as many times as needed until you reliably are able to re-run this code and get the same results without any code smells popping up. Dig into bad code smells or bad results smells wherever you sense them. If you aren’t sure why you feel this way about your code or results, hold on to this and it may be something your collaborator will be able to see something you don’t. 5) Let it simmer Leave your analysis for a bit. Do you think it’s perfect? Are you at your wits end with it? No matter how you feel about it, let it sit for a half a day or so then return to it with fresh eyes (Savonen 2021). 5) Re-review your documentation and code with fresh eyes Now with fresh eyes and doing your best to imagine you don’t have the knowledge you have – does your analysis and results make sense? 6) Are you sure it’s ready? Ask yourself if you’ve polished this code and documentation as far as you can reasonably take it? Realizing that determining what qualifies as far as you can reasonably take it is also a skill you will build with time. Code review is the most efficient use of everyone’s time when your code and documentation have reached this point. 8) Draft your request Now you are ready to send this code to your collaborator, but first try to send them a specific set of instructions and questions about what you would like them to review, in your message to them include this information (You may want to draft this out in a scratch file): Code review requests should include: A link to your repository that has your README to get them quickly oriented to the project. A request for what kind of feedback you are looking for. Big picture? Technical? Method selection? Are there specific areas of the code you are having trouble with or are unsure about? Send a link to the specific lines in GitHub you are asking about. Are there results that are surprising, confusing, or smell wrong? Be sure to detail what you have dug into and tried at this point for any problematic points. Explicitly ask them what commands or tests you’d like them to test run. Lastly, thank them for helping review your code! 9) Ready for review Now you are ready to send your crafted message to your collaborator for review. But, for the purposes of this exercise, you may not want to ask your collaborator to spend their time carefully review this practice repository, but now that you understand and have done the steps involved you are prepared to do this for your own analyses! TL;DR for asking for a code review: Any feedback you have regarding this exercise is greatly appreciated; you can fill out this form! "],["conducting-code-review-as-an-author-on-github.html", "Chapter 12 Conducting code review as an author on GitHub 12.1 Prerequisites 12.2 Learning Objectives 12.3 Author responsibilities in code review 12.4 Characteristics of great pull requests 12.5 Exercise: Create your pull request description", " Chapter 12 Conducting code review as an author on GitHub 12.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github Set up a Git Client Know how to make a pull request - Beginner method or Advanced method 12.2 Learning Objectives We’ve previously discussed that the only way to know if your analysis is truly reproducible is to send it to someone else to reproduce! That sentiment is at the heart of code review. Although most wouldn’t dare send out a manuscript for publishing without having our collaborators giving it a line-by-line review, people don’t always feel the same way about code. Parker (2017) describes code review: Code review will not guarantee an accurate analysis, but it’s one of the most reliable ways of establishing one that is more accurate than before. Not only does code review help boost the accuracy and reproducibility of the analysis, it also helps everyone involved in the process learn something new! An effective code review atmosphere is something that individuals and their team have to commit to (pun intended). Effective code review brings so many benefits not only to your project quality but also your communication skills through fostering a learning atmosphere! In this chapter and the next we will discuss the two sides of code review. Code review ideally includes at least two people: the author of the pull request and the reviewer of the pull request. Depending on your job context, we realize that sometimes authors have to become their own reviewers if code review is not something that can be prioritized by your institution or team. 12.3 Author responsibilities in code review The code review process begins with the creation of a pull request (which we practiced in the previous chapter). Successful and efficient code review is born out of quality communication, which is a skill set on its own. You can set up your reviewers (and yourself) up for success by knowing what basic information can help get the code review conversation going. Even if you end up being the only person who will review your own code, writing these things out is still very helpful and highly recommended. It can help you spot problems you might not have otherwise seen and generally help you document better for future you! 12.4 Characteristics of great pull requests 12.4.1 There’s plenty of context! What’s the story behind around the changes you are proposing? Sometimes when we are in the thick of a project we can make the mistake of assuming everyone knows what we know. This can unfortunately leave a huge burden on your reviewer to try to follow a paper trail to try to understand what you are doing. Before sending off a review request, re-read your PR description and think about the perspective of your reviewer. Err on the side that they have no idea what is happening on the project (because sometimes this is the case!) Tell a short story to explain what lead to you making these changes including attempting to answer these questions: What is the problem that these changes will solve? Do you have any URLs relevant issues or files you can share? What inspired you to take this approach – are there other things you tried? Are there other pull requests related to this change? 12.4.2 Includes an explicit request for what kind of feedback is needed What would you like your reviewer to do with this pull request? Stating this explicitly can save both of you time in this code review. Are you still in the early stages and looking for a bigger picture review? Let them know that before they waste their time digging into the code line-by-line. Are you in the later stages and looking for detailed nit-picky review? Are you looking for feedback on the results or methods? 12.4.3 Points out questionable areas that need extra attention Are there specific areas of the code you are having trouble with or are unsure about? Send a link to the specific lines in GitHub you are asking about. Are there results that are surprising, confusing, or smell wrong? Be sure to detail what you have dug into and tried at this point for any problematic points. 12.4.4 Are relatively small and focused Try to make sure your pull requests aren’t too long! Code reviewing fatigue is very real. If you send a reviewer thousands of lines of code to review it will be very overwhelming to review or understand. 10 lines of code = 10 issues.500 lines of code = \"looks fine.\"Code reviews. — I Am Devloper ((iamdevloper?)) November 5, 2013 Alternatively, when you create a new branch try to set a very intentional (and relatively small) goal you would like to achieve with your upcoming pull request. Keeping your pull requests small and focused on one task at a time will not only help your reviewers but also will help yourself feel more accomplished and organized. Also recall that incremental changes are good! Perhaps you do have a very large restructuring of your repository you are trying to accomplish, but finding smaller reasonable sets of changes (which would each have their own pull requests) to reach that goal incrementally can help keep things more manageable. Using Stacked Pull Requests in GitHub 12.4.5 Don’t ask a reviewer to dig through dirty code Determining when a pull request fully cooked and ready for review is a skill in itself. Pull requests that haven’t had enough time to be polished can put an unnecessarily larger burden on the reviewer. On the other hand, pull requests that have been hashed and rehashed in a silo might have benefitted from big picture feedback at an earlier stage of the code. This is something that you and your team can figure out a balance for in time using lots of communication! This being said, the first reviewer of your code should always be yourself! Take time to review your own changes by clicking on the Files Changed tab and going over that section carefully. Are all the changes included that you were expecting? Are there any changes you didn’t expect that are showing up? These can be symptomatic of a deeper problem. Definitely dig into anything that is not what you expected. Set aside your changes and return them in a few hours, or the next day. Looking at your changes with fresh eyes may also allow you to find things you didn’t notice before. Additional tip, if you don’t want others to look at your pull request yet because you are still working on reviewing it, you can change it to a draft pull request so no one reviews it before you are ready. This can also be a handy tactic to use if you just want to ask for big picture feedback someone but want to make it clear that it is not anywhere near ready for merging to main. 12.4.5.1 In summary: Let’s revisit our scenario with Avi and Ruby and see how Ruby could better prepare her changes for review: In this scenario Ruby was able to save Avi time in getting into the code review by being more specific about what kind of feedback she is looking for as well as links that explain the context behind these changes. Additionally, by supplying Avi with a smaller PR, Avi is less likely to be overwhelmed by Ruby’s request and be able to give her suggestions in a more timely manner. 12.5 Exercise: Create your pull request description Add a pull request template to your repository! This will help initiate consistent and clear communication around the pull requests in your repository. Pull request templates are a way to give yourself and other contributors prompts when starting a new pull request. See below for an example. The comments between &lt;!-- and --&gt; are html comments that will not show up so you don’t need to delete them if you don’t want to. On the right side, it shows how this template looks when it’s rendered. You can see this at any time by clicking Preview – this is true in other places in GitHub. 12.5.0.1 Set up a pull request template Create a new branch as we described in the previous chapter. In your local repository, create a folder called .github Copy and paste this pull request template file to a new text file and save it as a .md to get started. Feel free to edit this file to your own needs and add it to the .github folder of your repository. Use GitKraken to add and commit this new file. Push this commit. Open up a pull request. Craft your pull request description based on what we discussed in this chapter. Click on the Files Changed tab and make sure it includes the .github/PULL_REQUEST_TEMPLATE.md file. Walk away from your pull request and then return later and review it yourself. Make any necessary changes. When you are ready, request a reviewer by choosing someone underneath Reviewer on the right side! 12.5.1 Preparing for the return of your review As you wait for your reviewer to get back to you, it can be helpful to remind yourself the purpose of code reviews get yourself in a positive mindset. You’ve given your reviewer information to help them help you and now is the time to wait. First of all, you should pat yourself on the back for engaging in code review. It does require more time and sometimes that can feel scary with looming deadlines, but kudos for being able to prioritize your commitment to creating increasingly reproducibility analyses! Remember that you are not your code and mistakes are all a part of the process! Putting your project out there can feel a tad vulnerable even. You may have felt the impulse to keep your code’s problems buried under a rug, but you pushed past that and are making your analyses transparent! Remember that hidden problems don’t get solved, but known problems are opportunities for reaching an even better end result than you imagined! When you receive a review back remember that you and the reviewer are on the same team and both want the best end result feasible for this project! They may suggest ideas that you love and can’t wait to implement. They also might suggest ideas you don’t agree with. Do your best to take all their comments as positive learning opportunities and look for ways to compromise and determine solutions collaboratively. 12.5.1.1 Recommended reading about code review Why code reviews matter (and actually save time!) by Radigan (2021). Pull request descriptions by Bañuelos (2020). A zen manifesto for effective code reviews by Jean-Charles (2019). Best practices for Code Review by Smartbear Team (2021). If you have any feedback on this chapter, please fill out this form, we’d love to hear your feedback! "],["conducting-code-review-as-a-reviewer-on-github.html", "Chapter 13 Conducting code review as a reviewer on GitHub 13.1 Prerequisites 13.2 Learning Objectives 13.3 Reviewer responsibilities in code review", " Chapter 13 Conducting code review as a reviewer on GitHub 13.1 Prerequisites Have an understanding of why Github is useful Have a GitHub account Create a repository on Github Set up a Git Client Know how to make a pull request - Beginner method or Advanced method 13.2 Learning Objectives 13.3 Reviewer responsibilities in code review When reviewing a pull request, you take on responsibility to ensure that the pull request is getting the project to a better state than before. There are three aspects to reviewing we will focus on: Identify areas in the code and documentation that are opportunities for improvement. Communicate your questions and concerns effectively and in a way that creates a positive atmosphere. Determine solutions collaboratively in a way that allows for a learning as well as a long term improved product. 13.3.1 What to look for! Depending on the goals of the project, and pull request there can be a lot to keep an eye out for. There are many articles out there about what to look for in a code review. Here’s some general points: Does the analysis answer the question it’s asking? Are the methods it uses to do so appropriate? Is the code clear and readable? Does it contain a healthy amount of comments and documentation for individuals not familiar with the project to understand generally what is going on? Is the code efficient with computational resources? (Are there areas it’s a bit too greedy with memory usage?) Does the code stick to the style and conventions of this project? Are there alternate scenarios where the current strategy might fail? (depending on the likelihood of this use case, this may be an instance for a new issue and for it to be addressed in a different pull request). 13.3.2 How to communicate it The pull request may be the author’s precious bundle. Try to be empathetic to the learning process! You are both working on this project together – assume you both want the best out of this project. If something seems wrong, work together to find a solution, don’t ever waste time on placing blame. Remember that everything sounds harsher when you don’t have in-person cues! In this example, Avi may be stating factual things, but without his pleasant and reassuring disposition, it can feel super harsh. If Avi had reframed his comments, they might be more effective in this collaboration. Babatunde (2018) suggests framing review comments in three ways to help communication: questions, suggestions, and appreciations. 13.3.2.1 Questions For example: What happens if this doesn’t get saved? Does it throw an exception or fails silently? The key is to be specific with the questions. Mention exact file names. Put comments on the line you are referring to. Explain what you think is happening and ask them to explain if that is correct. 13.3.2.2 Suggestions For example: I suggest you use an ArrayHelper getValue method here because of its error handling capability instead of accessing the value directly You could even go further by giving an example: $a = $b[‘key’]; would raise an error if key is not set but \\(a = ArrayHelper::getValue(\\)b, ‘key’); would return a null value if key is not set. Giving suggestions and explain not only how to implement it but why it might be preferred in this scenario is a great learning process both for the author and yourself. 13.3.2.3 Appreciations Start every review comment with an appreciation for the hard work completed! This goes a long way for creating a positive atmosphere. For example: Nice Job! Alice. I suggest we create an interface for this service so other substitute services can implement the interface as well, this would enable us change to a different service with very minimal efforts when the need arises. What do you think? Let’s see how Avi’s message could have been reworked to give a more effective review: This interaction reminds us that effective code review is steeped in empathy from both sides. Authors need to appreciate the time and effort the reviewer is spending to help them; while reviewers need to be sensitive to the amount of effort put in by the author already. 13.3.3 Exercise: Review Past you’s code Find the oldest code you wrote and currently have on your computer. Create a repository and pull request with this old code, following the general steps for creating a repository and pull request from the previous chapter. Request yourself as a reviewer. Review the code on Github using their docs as a guide for the mechanics of it. As you review, have empathy for past yourself, and give questions, appreciations, and suggestions in regards to this code. 13.3.3.1 Recommended reading about code review Comments during Code Reviews by Babatunde (2018) On Empathy and Pull Requests by Duretti Hirpa (2016). Code Review Guidelines for Humans by Hauer (2018). Your Code Sucks! – Code Review Best Practices by Hildebr (2020). An even longer list of readings about code review If you have any feedback on this chapter, please fill out this form, we’d love to hear your feedback! "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) Candace Savonen Content Consultants [Amy Paguirigan Technical Course Publishing Engineer(s) Helped with the code for the technical aspects related to the specific course generation Template Publishing Engineers Candace Savonen, Carrie Wright, Ava Hoffman Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Ava Hoffman, Candace Savonen Package Developers (ottrpal) Candace Savonen, John Muschelli, Carrie Wright Art and Design Illustrator(s) Candace Savonen Figure Artist(s) Candace Savonen   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.5 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2023-09-20 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.5) ## bookdown 0.24 2023-03-28 [1] Github (rstudio/bookdown@88bc4ea) ## bslib 0.4.2 2022-12-16 [1] CRAN (R 4.0.2) ## cachem 1.0.7 2023-02-24 [1] CRAN (R 4.0.2) ## callr 3.5.0 2020-10-08 [1] RSPM (R 4.0.2) ## cli 3.6.1 2023-03-23 [1] CRAN (R 4.0.2) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.20 2023-01-17 [1] CRAN (R 4.0.2) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fastmap 1.1.1 2023-02-24 [1] CRAN (R 4.0.2) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.4.2 2020-08-27 [1] RSPM (R 4.0.5) ## hms 0.5.3 2020-01-08 [1] RSPM (R 4.0.0) ## htmltools 0.5.5 2023-03-23 [1] CRAN (R 4.0.2) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## jsonlite 1.7.1 2020-09-07 [1] RSPM (R 4.0.2) ## knitr 1.33 2023-03-28 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.0.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.0.2) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.0.2) ## ottrpal 1.0.1 2023-03-28 [1] Github (jhudsl/ottrpal@151e412) ## pillar 1.9.0 2023-03-22 [1] CRAN (R 4.0.2) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] RSPM (R 4.0.3) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.4.0 2020-10-07 [1] RSPM (R 4.0.2) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## readr 1.4.0 2020-10-05 [1] RSPM (R 4.0.2) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 1.1.0 2023-03-14 [1] CRAN (R 4.0.2) ## rmarkdown 2.10 2023-03-28 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.0.2) ## sass 0.4.5 2023-01-24 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2023-03-28 [1] Github (R-lib/testthat@e99155a) ## tibble 3.2.1 2023-03-20 [1] CRAN (R 4.0.2) ## usethis 1.6.3 2020-09-17 [1] RSPM (R 4.0.2) ## utf8 1.1.4 2018-05-24 [1] RSPM (R 4.0.3) ## vctrs 0.6.1 2023-03-22 [1] CRAN (R 4.0.2) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2023-03-28 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "Chapter 14 References", " Chapter 14 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
